<div class="row">
  <div class="column">
    <h2 class="title">Welcome {{name}}!</h2>
  </div>
</div>
<div class="spacing">
  <button class="button" id="btnShowCreatePost">Create a new post</button>
</div>

<div id="divCreatePost" class="hidden">
  <div class="container content-box shadow-box rounded-box">
    <h1 class="title">Create a New Post</h1>

    <form class="form new-post-form">
      <div class="form-group spacing">
        <label for="post-title" class="label">Title:</label>
        <input class="input" type="text" id="post-title" name="post-title" />
      </div>
      <div class="form-group spacing">
        <label for="post-description" class="label">Description:</label>
        <textarea class="input" id="post-description" name="post-description"></textarea>
      </div>
      <div class="form-group spacing">
        <button class="button" type="submit">Create Post</button>
      </div>
    </form>
  </div>
</div>

{{#if posts.length}}
<div>
  <div class="title">My Posts</div>
  {{#each posts as |post|}}
  <div class="post">
    <div class="post-title">
      <a class="post-link" href="/api/posts/{{post.id}}">{{post.title}}</a>
    </div>
    <hr>
    <div class="post-content">
      <p>{{post.description}}</p>
    </div>
    <div class="post-date">
      <p>Created on {{format_date post.createdAt}}</p>
    </div>
    <div id="divEdit{{post.id}}" class="hidden">
      <label for="editdescription{{post.id}}" class="label">Description:</label>
      <textarea class="input" id="editdescription{{post.id}}" name="editdescription{{post.id}}">{{post.description}}</textarea>
      <div class="spacing">
        <button class="button update-post" data-id="{{post.id}}" onclick="updateButtonHandler(this);">Save changes</button>
      </div>
    </div>
    <div class="spacing">
      <button class="button edit-post" data-id="{{post.id}}" onclick="editButtonHandler(this);">Edit</button>
    </div>
    <div class="spacing">
      <button class="button delete-post" data-id="{{post.id}}">Delete</button>
    </div>
  </div>
  {{/each}}
</div>
{{/if}}

<script src="../js/post.js"></script>
<script>
  // Function to handle the new post form submission
const handleAddPost = async (event) => {
  event.preventDefault();

  // Retrieve user input from the new post form
  const title = document.querySelector('#post-title').value.trim();
  const content = document.querySelector('#post-content').value.trim();

  if (title && content) {
    // Send a POST request to the create post route
    const response = await fetch('/api/posts', {
      method: 'POST',
      body: JSON.stringify({ title, content }),
      headers: { 'Content-Type': 'application/json' },
    });

    if (response.ok) {
      // If creating a new post is successful, redirect to the dashboard page
      document.location.replace('/dashboard');
    } else {
      // If creating a new post fails, display an error message
      alert('Failed to create a new post. Please try again.');
    }
  }
};

// Function to handle the new form submission
const newFormHandler = async (event) => {
  event.preventDefault();

  const title = document.querySelector('#post-title').value.trim();
  const description = document.querySelector('#post-description').value.trim();

  if (title && description) {
    const response = await fetch(`/api/posts`, {
      method: 'POST',
      body: JSON.stringify({ title, description }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      document.location.replace('/post');
    } else {
      alert('Failed to create post');
    }
  }
};

// Function to handle the delete button click
const delButtonHandler = async (event) => {
  if (event.target.hasAttribute('data-id')) {
    const id = event.target.getAttribute('data-id');

    const response = await fetch(`/api/posts/${id}`, {
      method: 'DELETE',
    });

    if (response.ok) {
      document.location.replace('/post');
    } else {
      alert('Failed to delete Post');
    }
  }
};

// Function to handle the edit button click
const editButtonHandler = async (caller) => {
  if (caller.hasAttribute('data-id')) {
    if (caller.innerHTML == 'Edit') {
      const postId = caller.getAttribute('data-id');
      document.querySelector(`#divEdit${postId}`).classList.remove('hidden');
      caller.innerHTML = 'Cancel';
    } else {
      const postId = caller.getAttribute('data-id');
      document.querySelector(`#divEdit${postId}`).classList.add('hidden');
      caller.innerHTML = 'Edit';
    }
  }
};

// Function to handle the update button click
const updateButtonHandler = async (caller) => {
  if (caller.hasAttribute('data-id')) {
    const id = caller.getAttribute('data-id');
    const description = document.querySelector(`#editdescription${id}`).value.trim();
    const response = await fetch('/api/posts/' + id, {
      method: 'PUT',
      body: JSON.stringify({ description }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      document.location.replace('/post');
    } else {
      alert('Failed to update Post');
    }
  }
};

// Function to show/hide the create post section
function showCreatePost() {
  var currentValue = document.querySelector('#btnShowCreatePost').textContent;
  if (currentValue == 'Cancel') {
    document.querySelector('#divCreatePost').classList.add('hidden');
    document.querySelector('#btnShowCreatePost').textContent = 'Create a New Post';
  } else {
    document.querySelector('#divCreatePost').classList.remove('hidden');
    document.querySelector('#btnShowCreatePost').textContent = 'Cancel';
  }
}

try {
  document.querySelector('.new-post-form').addEventListener('submit', handleAddPost);
  document.querySelector('.new-post-form').addEventListener('submit', newFormHandler);
  document.querySelector('.delete-post').addEventListener('click', delButtonHandler);
  document.querySelector('#btnShowCreatePost').addEventListener('click', showCreatePost);
} catch (error) {
  console.error('Error:', error);
}
</script>